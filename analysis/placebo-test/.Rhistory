conventional <- c("Conventional", result_donut$coef[1, 1], result_donut$se[1, 1], result_donut$pv[1, 1])
bias_corrected <- c("Bias-Corrected", result_donut$coef[2, 1], result_donut$se[2, 1], result_donut$pv[2, 1])
robust <- c("Robust",
format(result_donut$coef[3, 1], digits = 3, scientific = FALSE),
format(result_donut$se[3, 1], digits = 3, scientific = FALSE),
format(result_donut$pv[3, 1], digits = 3, scientific = FALSE))
# combine the results
result_table <- rbind(conventional, bias_corrected, robust)
colnames(result_table) <- c("Method", "Coef", "SE", "p-value")
return(result_table)
}
cutoff = 0.41
donut_widths <- c(0.01, 0.0125, 0.015, 0.0175, 0.02, 0.0225, 0.025)
results_with_control <- list()
for (donut in donut_widths) {
result <- perform_rd_analysis(cutoff, donut, 0.066, 0.135)
results_with_control[[paste0("donut_", donut)]] <- result
}
# with controls
combined_results_with_control <- do.call(rbind, lapply(names(results_with_control), function(donut) {
result <- results_with_control[[donut]]
robust_result <- result[result[, "Method"] == "Robust", ]
data.frame(Donut_Width = donut, Method = robust_result[1], Coef = robust_result[2], SE = robust_result[3], p_value = robust_result[4])
}))
colnames(combined_results_with_control) <- c("Donut Width", "Method", "Coef", "SE", "p-value")
# without controls
combined_results <- do.call(rbind, lapply(names(results), function(donut) {
result <- results[[donut]]
robust_result <- result[result[, "Method"] == "Robust", ]
data.frame(Donut_Width = donut, Method = robust_result[1], Coef = robust_result[2], SE = robust_result[3], p_value = robust_result[4])
}))
colnames(combined_results) <- c("Donut Width", "Method", "Coef", "SE", "p-value")
merged_results <- merge(combined_results_with_control, combined_results, by = c("Donut Width", "Method"))
merged_results_df <- as.data.frame(merged_results)
colnames(merged_results_df) <- c("Donut Width", "Method", "Coef", "SE", "p-value", "Coef", "SE", "p-value")
# print as a latex table
latex_code <- print(xtable(merged_results_df,
caption = "RD Analysis Donut RD Results with and without Controls",
label = "tab:rd_robust_results"),
include.rownames = FALSE,
type = "latex",
print.results = FALSE)
latex_code <- gsub("\\\\begin\\{tabular\\}\\{llllllll\\}\n  \\\\hline\n",
"\\\\begin{tabular}{llllllll}\n  \\\\hline\n &  & \\\\multicolumn{3}{c}{Without Control} & \\\\multicolumn{3}{c}{With Control} \\\\\\\\\n",
latex_code)
latex_code <- gsub("\\\\end\\{tabular\\}", "\\\\end{tabular}\nNote that the cutoff is 0.41, the main bandwidth is 0.066 and the bias bandwidth is 0.135.", latex_code)
write(latex_code, file = paste(working_directory , "result_tables/donut_robust.tex", sep='/'))
testing_variables <- c("pop", "light", "price_concession", "ln_end_price", "ln_nego_changes", "ln_watch_time", "green_ratio", "bedroom", "ln_watch_people", "living_room", "ln_negotiation_period", "museum", "kind", "mid", "sub", "house_age", "total_building")
results_list <- list()
counter <- 1
for (validation in testing_variables) {
rd_result <- rdrobust(y = panel_data[[validation]], x = panel_data$nearest_store_distances,
c = 0.41, h = 0.066, b = 0.135,
bwselect = "mserd", kernel = "triangular")
# 提取有效观测值数量并相加
effective_obs <- sum(rd_result$N_h)
# 提取结果并存储到列表中
results_list[[counter]] <- data.frame(
Covariate = validation,
Estimate = format(rd_result$coef[1], digits = 3, scientific = FALSE),
SE = format(rd_result$se[1], digits = 3, scientific = FALSE),
Z = format(rd_result$z[1], digits = 3, scientific = FALSE),
PValue = format(rd_result$pv[1], digits = 3, scientific = FALSE),
Bandwidth = format(rd_result$bws[1], digits = 3, scientific = FALSE),
EffectiveObs = effective_obs
)
counter <- counter + 1
}
results <- do.call(rbind, results_list)
latex_code <- print(xtable(results,
caption = "Placebo Test Results for Different Covariates",
label = "tab:placebo_test_results"),
include.rownames = FALSE,
type = "latex",
print.results = FALSE)
write(latex_code, file = paste(working_directory , "result_tables/rdd_placebo_test.tex", sep='/'))
print(results)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy=TRUE)
knitr::opts_chunk$set(fig.height=4)
knitr::opts_chunk$set(fig.width=7)
knitr::opts_chunk$set(warning=FALSE)
options(encoding = "UTF-8")
library(tidyverse)
library(lmtest)
library(sandwich)
library(car)
set.seed(123)
# you need to change the working directory to the base directory that contains the data-assignment folder
working_directory <- "C:/Users/Xuyuan/Desktop/discrete choice with simulation"
setwd(working_directory)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy=TRUE)
knitr::opts_chunk$set(fig.height=4)
knitr::opts_chunk$set(fig.width=7)
knitr::opts_chunk$set(warning=FALSE)
options(encoding = "UTF-8")
library(tidyverse)
library(lmtest)
library(sandwich)
library(pander)
library(xtable)
library(car)
set.seed(123)
# you need to change the working directory to the base directory that contains the data-assignment folder
working_directory <- "C:/Users/Xuyuan/Desktop/discrete choice with simulation"
setwd(working_directory)
binary_data <- read.csv("../data/problem 1/commute_binary.csv")
multi_data <- read.csv("../data/problem 1/commute_multinomial.csv")
binary_data
head(binary_data)
# We need to calculate the mean and variance
summarized_data <- binary_data %>%
summarize(cost_car_mean = mean(cost.car),
cost_car_med = median(cost.car),
time_bus_mean = mean(time.bus),
time_bus_med = median(time.bus),
time_car_mean = mean(time.car),
time_car_med = median(time.car))
print(summarized_data)
pander(summarized_data)
pander(summarized_data, caption = "Statistical Summary")
# We need to calculate the mean and variance
summarized_data_by_group <- binary_data %>%
group_by(mode) %>%
summarize(cost_car_mean = mean(cost.car),
cost_car_med = median(cost.car),
time_bus_mean = mean(time.bus),
time_bus_med = median(time.bus),
time_car_mean = mean(time.car),
time_car_med = median(time.car))
summarized_data_by_group
pander(summarized_data_by_group)
pander(summarized_data_by_group, caption = "statistical summary by group")
# model the choice as a linear probability model
linear_probability_model <- lm(formula = car ~ cost.car + time.car + time.bus,
data = binary_data)
# model the choice as a linear probability model
linear_probability_model <- lm(formula = car ~ cost.car + time.car + time.bus, \
data = binary_data)
# model the choice as a linear probability model
linear_probability_model <- lm(formula = car ~ cost.car + time.car + time.bus,
data = binary_data)
# model the choice as a linear probability model
linear_probability_model <- lm(formula = car ~ cost.car + time.car + time.bus, %>%
# model the choice as a linear probability model
linear_probability_model <- lm(formula = car ~ cost.car + time.car + time.bus, data = binary_data)
## Clean choice variable
binary_data <- binary_data %>%
mutate(car = (mode == 'car'))
# model the choice as a linear probability model
linear_probability_model <- lm(formula = car ~ cost.car + time.car + time.bus, data = binary_data)
# model the choice as a linear probability model
linear_probability_model <- lm(formula = car ~ cost.car + time.car + time.bus,
data = binary_data)
# Calculate heteroskedastic-robust standard errors
coeftest(linear_probability_model, vcov = vcovHC(linear_probability_model))
# Calculate estimated probability of car for each individual
binary_data <- binary_data %>%
mutate(prob_car = predict(linear_probability_model))
# count the number of individuals that are not feasible in our result
infeasible_result <- data_binary %>%
filter(prob_car < 0 | prob_car > 1) %>%
nrow()
# count the number of individuals that are not feasible in our result
infeasible_result <- binary_data %>%
filter(prob_car < 0 | prob_car > 1) %>%
nrow()
# Conduct a Wald test on time coefficients
linearHypothesis(linear_probability_model, 'time.car = -time.bus', vcov = vcovHC(reg_2a))
# Conduct a Wald test on time coefficients
linearHypothesis(linear_probability_model, 'time.car = -time.bus',
vcov = vcovHC(linear_probability_model))
pander(infeasible_result)
print("The Number of Infeasible Result is: ", infeasible_result)
print("The Number of Infeasible Result is: {infeasible_result}")
print(glue("The Number of Infeasible Result is: {infeasible_result}"))
print(glue("The Number of Infeasible Result is: {infeasible_result}", infeasible_result))
library(glue)
print(glue("The Number of Infeasible Result is: {infeasible_result}", infeasible_result))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy=TRUE)
knitr::opts_chunk$set(fig.height=4)
knitr::opts_chunk$set(fig.width=7)
knitr::opts_chunk$set(warning=FALSE)
options(encoding = "UTF-8")
library(tidyverse)
library(lmtest)
library(sandwich)
library(pander)
library(xtable)
library(car)
library(glue)
set.seed(123)
# you need to change the working directory to the base directory that contains the data-assignment folder
working_directory <- "C:/Users/Xuyuan/Desktop/discrete choice with simulation"
setwd(working_directory)
print(glue("The Number of Infeasible Result is: {infeasible_result}"))
# Conduct a Wald test on time coefficients
pander(linearHypothesis(linear_probability_model, 'time.car = -time.bus',
vcov = vcovHC(linear_probability_model)))
# Conduct a Wald test on time coefficients
print(linearHypothesis(linear_probability_model, 'time.car = -time.bus',
vcov = vcovHC(linear_probability_model)))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy=TRUE)
knitr::opts_chunk$set(fig.height=4)
knitr::opts_chunk$set(fig.width=7)
knitr::opts_chunk$set(warning=FALSE)
options(encoding = "UTF-8")
set.seed(123)
# these are the packages that we need to import
library(haven)
library(rdd)
library(ggplot2)
library(dplyr)
library(rdrobust)
library(plm)
library(xtable)
library(pander) # this is for table showing
library(latex2exp) # this is to export it
setwd("E:/umich/RealEstateBrokerage-main")
# need to place data on the base directory
data <- read_dta("template.dta")
working_directory <-"E:/umich/RealEstateBrokerage"
panel_data <- pdata.frame(data, index = c("id", "year"))
panel_data$L_jiadian <- lag(panel_data$jiadian, 1)
panel_data$L_kind <- lag(panel_data$kind, 1)
panel_data$L_hotel <- lag(panel_data$hotel, 1)
panel_data$L_shop_mall <- lag(panel_data$shop_mall, 1)
panel_data$L_museum <- lag(panel_data$museum, 1)
panel_data$L_old <- lag(panel_data$old, 1)
panel_data$L_ktv <- lag(panel_data$ktv, 1)
panel_data$L_mid <- lag(panel_data$mid, 1)
panel_data$L_prim <- lag(panel_data$prim, 1)
panel_data$L_west_food <- lag(panel_data$west_food, 1)
panel_data$L_super <- lag(panel_data$super, 1)
panel_data$L_sub <- lag(panel_data$sub, 1)
panel_data$L_park <- lag(panel_data$park, 1)
control_variables <- c(
"jiadian", "kind", "hotel", "shop_mall", "museum", "old", "ktv", "mid", "prim", "west_food", "super", "sub", "park",
"area", "bedroom", "toilet", "house_age", "floor_level", "green_ratio", "total_building", "total_floor_number", "living_room", "elevator_ratio", "kitchen", "floor_ratio", "total_resident",
"pm25", "pop", "light",
"non_online_effect", "ln_negotiation_period", "ln_watch_time", "ln_nego_changes", "ln_lead", "ln_watch_people"
)
testing_variables <- c("ln_negotiation_period", "ln_watch_time", "ln_nego_changes", "ln_lead", "ln_watch_people", "ln_end_price")
ci_level = 0.95
h = 0.066
cutoff = 0.41
running_var = panel_data$nearest_store_distances
filtered_data <- panel_data[abs(running_var - cutoff) <= h, ]
running_var = panel_data$nearest_store_distances
filtered_data <- panel_data[abs(running_var - cutoff) <= h, ]
typeof(panel_data$nearest_store_distances)
subset_condition <- abs(running_var - cutoff) <= h
filtered_data <- panel_data[subset_condition, ]
ci_level = 0.95
h = 0.066
cutoff = 0.41
running_var = panel_data$nearest_store_distances
filtered_data <- panel_data[abs(running_var - cutoff) <= h, ]
typeof(running_var)
running_var <- as.numeric(running_var)
filtered_data <- panel_data[abs(running_var - cutoff) <= h, ]
pdf("RD_Plot_1st_Order.pdf", width = 8, height = 4) # Adjust the width and height as needed
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 1,
title = "RD-plot 1st order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community",
ci = ci_level)
dev.off() # Close the PDF device
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 1,
title = "RD-plot 1st order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community",
ci = ci_level) # 置信区间为多项式回归的置信区间
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 1,
title = "RD-plot 1st order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community", ci = ci_level, col.dots = "blue")
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 1,
title = "RD-plot 1st order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community", ci = ci_level, col.dots = "blue")
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 1,
title = "RD-plot 1st order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community", ci = ci_level, col.dots = "blue")
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 2,
title = "RD-plot 1st order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community", ci = ci_level, col.dots = "blue")
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 2,
title = "RD-plot 1st order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community")
ci_level = 0.95
ci_level = 95
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 1,
title = "RD-plot 1st order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community", ci = ci_level, col.dots = "blue")
ci_level = 95
h = 0.066
cutoff = 0.41
running_var = panel_data$nearest_store_distances
running_var <- as.numeric(running_var)
filtered_data <- panel_data[abs(running_var - cutoff) <= h, ]
# Export the first RD plot to its own PDF file
pdf("RD_Plot_1st_Order.pdf", width = 1200, height = 900) # Adjust the width and height as needed
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 1,
title = "RD-plot 1st order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community", col.dots = "blue")
dev.off() # Close the PDF device
# Export the second RD plot to its own PDF file
pdf("RD_Plot_2nd_Order.pdf", width = 1200, height = 900) # Adjust the width and height as needed
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 2,
title = "RD-plot 1st order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community", col.dots = "blue")
dev.off() # Close the PDF device
# Export the third RD plot to its own PDF file
pdf("RD_Plot_3rd_Order.pdf", width = 1200, height = 900) # Adjust the width and height as needed
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 3,
title = "RD-plot 3rd order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community", col.dots = "blue")
dev.off() # Close the PDF device
ci_level = 95
h = 0.066
cutoff = 0.41
running_var = panel_data$nearest_store_distances
running_var <- as.numeric(running_var)
filtered_data <- panel_data[abs(running_var - cutoff) <= h, ]
# Export the first RD plot to its own PDF file
pdf("RD_Plot_1st_Order.pdf", width = 8, height = 4) # Adjust the width and height as needed
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 1,
title = "RD-plot 1st order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community", col.dots = "blue")
dev.off() # Close the PDF device
# Export the second RD plot to its own PDF file
pdf("RD_Plot_2nd_Order.pdf", width = 8, height = 4) # Adjust the width and height as needed
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 2,
title = "RD-plot 1st order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community", col.dots = "blue")
dev.off() # Close the PDF device
# Export the third RD plot to its own PDF file
pdf("RD_Plot_3rd_Order.pdf", width = 8, height = 4) # Adjust the width and height as needed
rdplot(y = filtered_data$ln_income,
x = filtered_data$nearest_store_distances,
c = cutoff, nbins = 40, p = 3,
title = "RD-plot 3rd order polynomial",
x.label = "Nearest distance to Lianjia's stores",
y.label = "Log of income in the community", col.dots = "blue")
dev.off() # Close the PDF device
library(dplyr)
library(haven)
library(ggplot2)
library(extrafont)
library(ggthemes)
name_figures <- c(
"placebo_entry_num.pdf",
"placebo_entry_lead.pdf",
"placebo_entry_period.pdf",
"placebo_entry_concession.pdf"
)
# This is for Windows System
loadfonts(device = "win")
# Windows System
setwd("E:/umich/RealEstateBrokerage/analysis/placebo-test")
file_names <- c('num_entry_effect.dta', 'lead_entry_effect.dta', 'period_entry_effect.dta', 'conces_entry_effect.dta')
for (i in 1:length(file_names)) {
data <- read_dta(file_names[i])
means <- colMeans(data)
sds <- apply(data, 2, sd)
names_list <- c('pre2', 'pre1', 'entry', 'post1', 'post2', 'post3')
plot_data <- data.frame(
Coefficient = factor(names_list, levels = names_list),
Mean = means,
SD = sds
)
result <- ggplot(plot_data, aes(x = Coefficient, y = Mean)) +
geom_point(size = 3, color = "darkblue") +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = 0.2) +
theme_classic(base_family = "Times New Roman") +  # Use Arial font
labs(y = "Mean Value",
x = "Coefficient") +
theme_bw() +  # Apply a beautiful theme from ggthemes
theme(
text = element_text(family = "Times New Roman", size = 14),  # Use Arial font
axis.title = element_text(size = 9, face = "bold"),
axis.text = element_text(size = 7, face = "bold"),
plot.title = element_text(size = 7, hjust = 0.5),
legend.title = element_text(size = 5),
legend.text = element_text(size = 5)
)
ggsave(name_figures[i], plot = result, dpi = 300)
}
# for LINUX system:
# Enable showtext to automatically use the registered fonts
showtext_auto()
library(showtext)
install.packages("showtext")
library(showtext)
name_figures <- c(
"placebo_entry_num.pdf",
"placebo_entry_lead.pdf",
"placebo_entry_period.pdf",
"placebo_entry_concession.pdf"
)
# for LINUX system:
# Enable showtext to automatically use the registered fonts
showtext_auto()
# Manually add the Times New Roman font
font_add("Times New Roman",
regular = "/usr/share/fonts/truetype/msttcorefonts/times.ttf",
bold = "/usr/share/fonts/truetype/msttcorefonts/timesbd.ttf",
italic = "/usr/share/fonts/truetype/msttcorefonts/timesi.ttf",
bolditalic = "/usr/share/fonts/truetype/msttcorefonts/timesbi.ttf")
# Windows System
setwd("E:/umich/RealEstateBrokerage/analysis/placebo-test")
file_names <- c('num_entry_effect.dta', 'lead_entry_effect.dta', 'period_entry_effect.dta', 'conces_entry_effect.dta')
for (i in 1:length(file_names)) {
data <- read_dta(file_names[i])
means <- colMeans(data)
sds <- apply(data, 2, sd)
names_list <- c('pre2', 'pre1', 'entry', 'post1', 'post2', 'post3')
plot_data <- data.frame(
Coefficient = factor(names_list, levels = names_list),
Mean = means,
SD = sds
)
result <- ggplot(plot_data, aes(x = Coefficient, y = Mean)) +
geom_point(size = 3, color = "darkblue") +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = 0.2) +
theme_classic(base_family = "Times New Roman") +  # Use Arial font
labs(y = "Mean Value",
x = "Coefficient") +
theme_bw() +  # Apply a beautiful theme from ggthemes
theme(
text = element_text(family = "Times New Roman", size = 14),  # Use Arial font
axis.title = element_text(size = 9, face = "bold"),
axis.text = element_text(size = 7, face = "bold"),
plot.title = element_text(size = 7, hjust = 0.5),
legend.title = element_text(size = 5),
legend.text = element_text(size = 5)
)
ggsave(name_figures[i], plot = result, dpi = 300)
}
name_figures2 <- c(
"placebo_plat_num.pdf",
"placebo_plat_lead.pdf",
"placebo_plat_period.pdf",
"placebo_plat_concession.pdf"
)
file_names2 <- c('num_platform.dta', 'lead_platform.dta', 'period_platform.dta', 'conces_platform.dta')
for (i in 1:length(file_names2)) {
data <- read_dta(file_names2[i])
means <- colMeans(data)
sds <- apply(data, 2, sd)
names_list <- c('pre2', 'pre1', 'entry', 'post1', 'post2', 'post3')
plot_data <- data.frame(
Coefficient = factor(names_list, levels = names_list),
Mean = means,
SD = sds
)
result <- ggplot(plot_data, aes(x = Coefficient, y = Mean)) +
geom_point(size = 3, color = "darkblue") +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = 0.2) +
theme_classic(base_family = "Times New Roman") +  # Use Arial font
labs(y = "Mean Value",
x = "Coefficient") +
theme_bw() +  # Apply a beautiful theme from ggthemes
theme(
text = element_text(family = "Times New Roman", size = 14),  # Use Arial font
axis.title = element_text(size = 9, face = "bold"),
axis.text = element_text(size = 7, face = "bold"),
plot.title = element_text(size = 7, hjust = 0.5),
legend.title = element_text(size = 5),
legend.text = element_text(size = 5)
)
ggsave(name_figures2[i], plot = result, dpi = 300)
}
